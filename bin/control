#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH
. ~/.profile

readonly J_XMX="512m"
readonly J_XMS="512m"
readonly PLAY2_RUNTIME=${OPENSHIFT_TMP_DIR}
readonly PLAY2_PID_RUN=${PLAY2_RUNTIME}/play2.pid
readonly PLAY2_PID_ACTIVATOR_BUILD=${PLAY2_RUNTIME}/play2_activator_build.pid
readonly PLAY2_NUM_BUILD=${PLAY2_RUNTIME}/play2_num_build.counter
readonly CARTRIDGE_TYPE="play2"
readonly WAIT_MESSAGE="So... keep calm and wait... it could be taken ~15 minutes for first build... take a break: watch some videos, listen some music tracks, ..."

function get_num_build {
  if [ -f "$PLAY2_NUM_BUILD" ]; then
    return $(cat $PLAY2_NUM_BUILD)
  else
    echo 0 > $PLAY2_NUM_BUILD
    return 0
  fi
}

function inc_num_build {
  if [ -f "$PLAY2_NUM_BUILD" ]; then
    local NUM_BUILD=$(cat $PLAY2_NUM_BUILD)
    NUM_BUILD=$((NUM_BUILD+1))
    echo $NUM_BUILD > $PLAY2_NUM_BUILD
  else
    echo 0 > $PLAY2_NUM_BUILD
  fi
}

function start {
  # Check for running app
  if isrunning $PLAY2_PID_RUN ; then
      echo "Application is already running"
  elif isrunning $PLAY2_PID_ACTIVATOR_BUILD ; then
      echo "Application is building"
  else
    get_num_build
    local NUM_BUILD=$?
    if [ $NUM_BUILD -eq 1 ]; then
      # build on first time
      build
      echo "Application first start, waiting build process"
    else
      cd $PLAY2_APPLICATION_PATH
      rm -f target/universal/stage/RUNNING_PID
      BIN_NAME=$(ls target/universal/stage/bin/ | head -n 1)
      nohup target/universal/stage/bin/$BIN_NAME -Duser.home=${PLAY2_APPLICATION_PATH} -Dhttp.port=8080 -Dhttp.address=${OPENSHIFT_PLAY2_IP} -DapplyEvolutions.default=true -Dconfig.resource=openshift.conf -J-Xmx$J_XMX -J-Xms$J_XMS -Dpidfile.path=${PLAY2_PID_RUN} > $OPENSHIFT_PLAY2_LOG_DIR/play.log 2>&1 &
    fi
  fi
}

function stop {
  if isrunning $PLAY2_PID_RUN ; then
    if [ -f "$PLAY2_PID_RUN" ]; then
      local PLAY2_PID=$(cat $PLAY2_PID_RUN);
      echo "Sending SIGTERM to $CARTRIDGE_TYPE:$PLAY2_PID ..." 1>&2
      killtree $PLAY2_PID
    else
      echo "Failed to locate $CARTRIDGE_TYPE PID File" 1>&2
    fi
  else
    echo "$CARTRIDGE_TYPE cart is already stopped"
  fi
}

function restart {
    echo "Restarting $CARTRIDGE_TYPE cart"
    stop
    start
}

function build {
    # Workaround for failure in npm install when a package in package.json
    # points to a git commit.
    # This issue occurs because we are running in the context of a
    # git post receive-hook
    unset GIT_DIR
    unset GIT_WORK_TREE

    cd ${PLAY2_APPLICATION_PATH}
    echo "JAVA_HOME[${JAVA_HOME}]"
    echo "PATH[${PATH}]"
    echo "PLAY2_APPLICATION_PATH[${PLAY2_APPLICATION_PATH}]"
    get_num_build
    local NUM_BUILD=$?
    if [ $NUM_BUILD -eq 0 ]; then
      # First build
      echo "First build, it takes a while."
      echo "At the end of build it will run start process"
      echo "$WAIT_MESSAGE"
      nohup activator clean stage -Duser.home=${PLAY2_APPLICATION_PATH} -J-Xmx$J_XMX -J-Xms$J_XMS && inc_num_build && rm $PLAY2_PID_ACTIVATOR_BUILD && start &
      local BUILD_PID=$!
      echo "$BUILD_PID" > $PLAY2_PID_ACTIVATOR_BUILD
    elif isrunning $PLAY2_PID_RUN
     then
      echo "Another build is running, please wait previous build process"
    else
      echo "Play activator build process"
      # Clear PID process
      rm $PLAY2_PID_ACTIVATOR_BUILD
      activator clean stage -Duser.home=${PLAY2_APPLICATION_PATH} -J-Xmx$J_XMX -J-Xms$J_XMS
      inc_num_build
    fi
}

function tidy {
    shopt -s dotglob
    rm -rf $OPENSHIFT_TMP_DIR/*
}

# Check if the play2 process is running
function isrunning() {
    echo "Inside isrunning 1[$1]"
    # Check for running app
    if [ -f "$1" ]; then
      local PID_TO_CHECK=$(cat $1);
      echo "Inside isrunning PID_TO_CHECK[$PID_TO_CHECK]"
      if /bin/ps --pid $PID_TO_CHECK 1>&2 >/dev/null;
      then
        return 0
      fi
    fi

    return 1
}

function status() {
  if isrunning $PLAY2_PID_ACTIVATOR_BUILD
   then
     get_num_build
     local NUM_BUILD=$?
     if [ $NUM_BUILD -eq 0 ]; then
       client_result "Application is building. $WAIT_MESSAGE"
     else
       client_result "Application is building"
    fi

  elif isrunning $PLAY2_PID_RUN
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}


# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z "$should_be_gone_pid" ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

function catchall {
    echo "$1 - Not yet implemented"
}


case "$1" in
  start)       start ;;
  stop)        stop ;;
  restart)     restart ;;
  status)      status ;;
  reload)      catchall "reload";;
  tidy)        tidy ;;
  pre-build)   catchall "pre-build";;
  build)       build ;;
  deploy)      catchall "deploy";;
  post-deploy) catchall "post-deploy";;
  *)           exit 0
esac

exit 0
